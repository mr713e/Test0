<!-- <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-2.5.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"> -->
<beans xmlns="http://www.springframework.org/schema/beans" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:p="http://www.springframework.org/schema/p" 
        xmlns:context="http://www.springframework.org/schema/context" 
        xmlns:jee="http://www.springframework.org/schema/jee" 
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:tx="http://www.springframework.org/schema/tx" 
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-2.5.xsd
                            http://www.springframework.org/schema/jee
                            http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <!--引入类路径下的文件-->
   <!-- location="file:///D:/salespa/conf/database.properties" -->
    <context:property-placeholder location="classpath:property/database.properties"/>
    <!-- DBCP数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 池启动时创建的连接数量 -->
<!--         <property name="initialSize" value="${dbcp.initialSize}"/> -->
        <!-- 同一时间可以从池分配的最多连接数量。设置为0时表示无限制 -->
<!--         <property name="maxActive" value="${dbcp.maxActive}"/> -->
        <!-- 池里不会被释放的最多空闲连接数量。设置为0时表示无限制 -->
<!--         <property name="maxIdle" value="${dbcp.maxIdle}"/> -->
        <!-- 在不新建连接的条件下，池中保持空闲的最少连接数 -->
<!--         <property name="minIdle" value="${dbcp.minIdle}"/> -->
        <!-- 超时等待时间以毫秒为单位  -->  
<!--         <property name="maxWait" value="${dbcp.maxWait}"/> -->
        <property name="validationQuery" value="select 1 from dual"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>
    </bean>

    <!-- 第一步：将事务管理器作为一个bean配置到spring的容器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 事务管理器需要注入一个dataSource -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 第二步：定义通知，通知中要处理的就是事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" rollback-for="Exception"/>
            <tx:method name="save*" rollback-for="Exception"/>
            <tx:method name="update*" rollback-for="Exception"/>
            <tx:method name="*" read-only="true" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!-- 第三步：配置切入点，让通知关联切入点，即事务控制业务层的方法 -->
    <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* jp.co.token.salespa.service..*.*(..))"/>
        <aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice"/>
    </aop:config>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="singleton">
        <property name="configLocation" value="classpath:myBatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- *********************************************************************** -->
    <!--通过反射创建实例-->
    <bean id="ZY00000Action" class="zy.test.action.ZY00000Action" scope="prototype">
      <property name="zy00000service" ref="ZY00000Service" />
    </bean>
    <bean id="ZY00000Service" class="zy.test.service.impl.ZY00000ServiceImpl">
      <property name="zy00000dao" ref="ZY00000Dao" />
    </bean>
    <bean id="ZY00000Dao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="zy.test.dao.ZY00000Dao"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>

</beans>

